:PROPERTIES:
:ID:       60113df4-452d-4951-b440-d7c137f8c674
:END:
#+title: Valid Parentheses
#+filetags: :STACK:PROBLEM:

* [[id:f23824a1-0515-47c6-b386-21d83a9aec21][PROBLEM]]
Given a string =s= containing just the characters ='('= , =')'= , ='{'= , ='}'= , ='['= and =']'=, determine if the input string is valid.

An input string is valid if:
 + Open brackets must be closed by the same type of brackets.
 + Open brackets must be closed in the correct order.
 + Every close bracket has a corresponding open bracket of the same type.

** Example1
#+begin_src org
*Input*: s = "()"
*Output*: true
#+end_src

** Example2
#+begin_src org
*Input*: s = "([]){}"
*Output*: true
#+end_src

** Example3
#+begin_src org
*Input*: s = "(]"
*Output*: false
#+end_src

* SOLVING
** Steps
1. Create a [[id:0ec9d187-8d78-46da-ba4d-7a234c09ff8e][Stack]]
2. Browse the string:
   1) If characters is an =open parentheses= push to the =stack=
   2) If characters is an =close parentheses=
      1. If the top of the =stack= is the open equivalent pop the =stack=
      2. Otherwise return =false=, the string isn't closing the last open parentheses
   3) Otherwise return =false=, the character isn't an open or close parentheses
3. return =true= if the =stack= is empty otherwise =false= because all parentheses aren't closed

** Code
#+begin_src cpp
class Solution {
public:
  bool isValid(string s) {
    const string open = "({[";
    const string close = ")}]";
    stack<char> parenthesesOpen;

    for (int i = 0; i < s.size(); i++) {
      if (open.find(s[i]) != std::string::npos)
        parenthesesOpen.push(s[i]);
      else {
        int n = close.find(s[i]);
        if (n != std::string::npos) {
          if (parenthesesOpen.empty() || open[n] != parenthesesOpen.top())
            return false;
          parenthesesOpen.pop();
        } else
          return false;
      }
    }
    return parenthesesOpen.empty();
  }
};
#+end_src
